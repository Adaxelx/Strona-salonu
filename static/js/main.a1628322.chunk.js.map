{"version":3,"sources":["MobileComponents/Nav/btnNav.js","MobileComponents/Nav/openedNav.js","MobileComponents/Nav/NavM.js","MobileComponents/Logo.js","App.js","serviceWorker.js","index.js"],"names":["btNav","props","react_default","a","createElement","onClick","handleClick","className","active","openedNav","NavM","state","_this","setState","Fragment","Nav_openedNav","this","btnNav","React","Component","Logo","App","MobileComponents_Logo","Nav_NavM","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uKAaeA,QAVD,SAACC,GACX,OACIC,EAAAC,EAAAC,cAAA,UAAQC,QAASJ,EAAMK,YAAaC,UAAWN,EAAMO,OAAS,aAAe,OACzEN,EAAAC,EAAAC,cAAA,QAAMG,UAAU,YAChBL,EAAAC,EAAAC,cAAA,QAAMG,UAAU,YAChBL,EAAAC,EAAAC,cAAA,QAAMG,UAAU,eCQbE,EAZG,SAACR,GACf,OACIC,EAAAC,EAAAC,cAAA,OAAKG,UAAWN,EAAMO,OAAS,SAAW,IACtCN,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,qBAAJ,IAAuBF,EAAAC,EAAAC,cAAA,mBACvBF,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,uBAAoBF,EAAAC,EAAAC,cAAA,mBACxBF,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,iCAAJ,IAA2BF,EAAAC,EAAAC,cAAA,sBCc5BM,6MApBXC,MAAQ,CACJH,QAAQ,KAGZF,YAAc,WACVM,EAAKC,SAAS,CACVL,QAASI,EAAKD,MAAMH,kFAKxB,OACIN,EAAAC,EAAAC,cAAAF,EAAAC,EAAAW,SAAA,KACIZ,EAAAC,EAAAC,cAACW,EAAD,CAAWP,OAAQQ,KAAKL,MAAMH,SAC9BN,EAAAC,EAAAC,cAACa,EAAD,CAAQT,OAAQQ,KAAKL,MAAMH,OAAQF,YAAaU,KAAKV,sBAflDY,IAAMC,WCKVC,EANF,WACT,OACIlB,EAAAC,EAAAC,cAAA,UAAQG,UAAU,UCUXc,mLATX,OACEnB,EAAAC,EAAAC,cAAA,OAAKG,UAAU,OACbL,EAAAC,EAAAC,cAACkB,EAAD,MACApB,EAAAC,EAAAC,cAACmB,EAAD,cALUJ,aCSEK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO5B,EAAAC,EAAAC,cAAC2B,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.a1628322.chunk.js","sourcesContent":["import React from 'react';\r\nimport '../../Styles/MainStyle.sass';\r\n\r\nconst btNav = (props) => {\r\n    return (\r\n        <button onClick={props.handleClick} className={props.active ? 'btn active' : 'btn'}>\r\n            <span className='top bar'></span>\r\n            <span className='mid bar'></span>\r\n            <span className='bot bar'></span>\r\n        </button>\r\n     );\r\n}\r\n\r\nexport default btNav;","import React from 'react';\r\nimport '../../Styles/MainStyle.sass'\r\n\r\n\r\nconst openedNav = (props) => {\r\n    return (\r\n        <nav className={props.active ? 'active' : ''}>\r\n            <ul>\r\n                <li><span>Start</span> <span>00</span></li>\r\n                <li><span> Oferta</span><span>01</span></li >\r\n                <li><span>Umów się!</span> <span>02</span></li>\r\n            </ul>\r\n        </nav>\r\n     );\r\n}\r\n\r\nexport default openedNav;","import React from 'react';\r\nimport NavBtn from './btnNav.js'\r\nimport OpenedNav from './openedNav.js'\r\nclass NavM extends React.Component {\r\n    state = {\r\n        active: false,\r\n    }\r\n\r\n    handleClick = () =>{\r\n        this.setState({\r\n            active: !this.state.active\r\n        })\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <>\r\n                <OpenedNav active={this.state.active}/>\r\n                <NavBtn active={this.state.active} handleClick={this.handleClick}/>\r\n            </>\r\n         );\r\n    }\r\n}\r\n\r\nexport default NavM;","import React from 'react';\r\n\r\nconst Logo = () => {\r\n    return (\r\n        <header className=\"logo\"></header>\r\n     );\r\n}\r\n\r\nexport default Logo;","import React, { Component } from 'react';\nimport NavM from './MobileComponents/Nav/NavM.js'\nimport Logo from './MobileComponents/Logo.js'\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Logo/>\n        <NavM/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}
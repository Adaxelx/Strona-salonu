{"version":3,"sources":["images/salon.png","images/logo-salon.png","MobileComponents/Nav/btnNav.js","MobileComponents/Nav/openedNav.js","MobileComponents/Nav/NavM.js","MobileComponents/Logo.js","MobileComponents/HomeM.js","MobileComponents/Offer.js","MobileComponents/StartPage.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","btNav","props","react_default","a","createElement","onClick","handleClick","className","active","openedNav","react_router_dom","to","NavM","state","_this","setState","Fragment","Nav_openedNav","this","btnNav","React","Component","Logo","Home","src","img","alt","Offer","handleScroll","scrollY","window","console","log","title","current","offsetTop","offsetHeight","innerHeight","classList","add","createRef","addEventListener","ref","StartPage","HomeM","MobileComponents_Offer","App","react_router","render","_ref","_React$createElement","_React$createElement2","location","exact","path","MobileComponents_Logo","Nav_NavM","TransitionGroup","CSSTransition","key","classNames","timeout","Object","defineProperty","Start","Boolean","hostname","match","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c8e91d0f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/salon.6db37e50.png\";","module.exports = __webpack_public_path__ + \"static/media/logo-salon.fc2f6d2d.png\";","import React from 'react';\r\nimport '../../Styles/MainStyle.sass';\r\n\r\nconst btNav = (props) => {\r\n    return (\r\n        <button onClick={props.handleClick} className={props.active ? 'btn active' : 'btn'}>\r\n            <span className='top bar'></span>\r\n            <span className='mid bar'></span>\r\n            <span className='bot bar'></span>\r\n        </button>\r\n     );\r\n}\r\n\r\nexport default btNav;","import React from 'react';\r\nimport '../../Styles/MainStyle.sass'\r\nimport {NavLink} from 'react-router-dom'\r\n\r\nconst openedNav = (props) => {\r\n    return (\r\n        <nav className={props.active ? 'active' : ''}>\r\n            <section className='navList'>\r\n                <NavLink onClick={props.handleClick} to='/start' ><span>Start</span><span>00</span></NavLink>\r\n                <NavLink onClick={props.handleClick} to='/offer'><span>O mnie</span><span>01</span></NavLink>\r\n                <NavLink to='/'><span>Umów się!</span><span>02</span></NavLink>\r\n            </section>\r\n        </nav>\r\n     );\r\n}\r\n\r\nexport default openedNav;","import React from 'react';\r\nimport NavBtn from './btnNav.js'\r\nimport OpenedNav from './openedNav.js'\r\nclass NavM extends React.Component {\r\n    state = {\r\n        active: false,\r\n    }\r\n\r\n    handleClick = () =>{\r\n        this.setState({\r\n            active: !this.state.active\r\n        })\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <>\r\n                <OpenedNav active={this.state.active} handleClick={this.handleClick}/>\r\n                <NavBtn active={this.state.active} handleClick={this.handleClick}/>\r\n            </>\r\n         );\r\n    }\r\n}\r\n\r\nexport default NavM;","import React from 'react';\r\nimport '../Styles/MainStyle.sass'\r\n\r\nimport img from '../images/logo-salon.png'\r\n\r\nconst Logo = () => {\r\n    return (\r\n        <header className=\"logo\">Glynt</header>\r\n     );\r\n}\r\n\r\nexport default Logo;","import React from 'react';\r\nimport '../Styles/MainStyle.sass'\r\nimport img from '../images/salon.png'\r\n\r\n\r\nconst Home = () => {\r\n    return (\r\n        <>\r\n            <section className='home'>\r\n                <img src={img} alt=\"\"/>\r\n            </section>\r\n        </>\r\n     );\r\n}\r\n\r\nexport default Home;","import React from 'react';\r\nimport '../Styles/MainStyle.sass'\r\n\r\nclass Offer extends React.Component{\r\n\r\n    handleScroll = () => {\r\n        const scrollY = window.scrollY;\r\n        console.log(this.title.current.offsetTop)\r\n        if(scrollY>this.title.current.offsetTop + this.title.current.offsetHeight*2 -window.innerHeight){\r\n            this.title.current.classList.add('active')\r\n        }\r\n    }\r\n\r\n    title = React.createRef();\r\n\r\n    componentDidMount(){\r\n        window.addEventListener('scroll',this.handleScroll)\r\n    }\r\n\r\n    render(){\r\n        return (\r\n        <main className='offer'>\r\n            <h1 ref={this.title} className='title'>Nasza oferta</h1>\r\n        </main>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default Offer;","import React from 'react';\r\nimport Home from './HomeM.js'\r\nimport Offer from './Offer.js'\r\n\r\nimport '../Styles/MainStyle.sass'\r\n\r\nclass StartPage extends React.Component {\r\n    state = {  }\r\n    render() {\r\n        return (\r\n            <section className='startPage'>\r\n                <Home/>\r\n                <Offer/>\r\n            </section>\r\n         );\r\n    }\r\n}\r\n\r\nexport default StartPage;","import React, { Component } from 'react';\nimport { TransitionGroup, CSSTransition } from 'react-transition-group'\nimport NavM from './MobileComponents/Nav/NavM.js'\nimport Logo from './MobileComponents/Logo.js'\nimport Start from './MobileComponents/StartPage.js'\nimport {Switch,BrowserRouter as Router,Route,Redirect} from 'react-router-dom'\n\n// class App extends Component {\n//   render() {\n//     return (\n//      <>\n//         <Router>\n//           <Route render={({ location }) => (\n//             <Route exact path=\"/\" render={() => (\n//               <Redirect to=\"/start\"/>\n//             )}/>\n\n//               <Logo/>\n//               <NavM/>\n//             <TransitionGroup>\n//             <CSSTransition\n//                   key={location.key}\n//                   classNames=\"fade\"\n//                   timeout={1000}>\n//               <Switch location={location}>\n//                 <Route link='/' exact component={Home}/>>\n//               </Switch>\n//            </CSSTransition>\n//            </TransitionGroup>\n//             )}/>\n//         </Router>\n//      </>\n//     );\n//   }\n// }\n\n\nclass App extends React.Component{\n  render() {\n    return (\n       <Router>\n        <Route render={({ location }) => (\n          <div>\n            <Route exact path=\"/\" render={() => (\n              <Redirect to=\"/start\"/>\n            )}/>\n          <Logo/>\n          <NavM/>\n                <TransitionGroup>\n                <CSSTransition\n                  key={location.key}\n                  classNames=\"fade\"\n                  timeout={1500}\n                >\n            <Switch location={location}>\n                <Route exact path=\"/start\" exact component={Start} />\n                <Route exact path=\"/offer\" exact component={Start} />\n            </Switch>\n            </CSSTransition>\n        </TransitionGroup>\n\n\n          </div>\n        )}/>\n      </Router>\n     );\n}\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}